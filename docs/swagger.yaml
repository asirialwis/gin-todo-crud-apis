basePath: /
definitions:
  models.Todo:
    properties:
      completed:
        example: false
        type: boolean
      created_at:
        example: "2025-10-25T10:00:00Z"
        type: string
      id:
        description: GORM fields explicitly documented for Swagger
        example: 1
        type: integer
      item:
        description: Todo fields
        example: Buy groceries
        type: string
      updated_at:
        example: "2025-10-25T10:00:00Z"
        type: string
      user_id:
        description: Foreign key linking to User.ID
        example: 1
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        example: "2025-10-25T11:30:00Z"
        type: string
      email:
        description: Must be unique
        example: alice@example.com
        type: string
      id:
        description: GORM Model Fields (Explicitly documented for Swagger)
        example: 1
        type: integer
      todos:
        description: 'Relationship: List of associated Todo items'
        items:
          $ref: '#/definitions/models.Todo'
        type: array
      updated_at:
        example: "2025-10-25T11:30:00Z"
        type: string
      username:
        description: User fields
        example: user_alice
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for a User/Todo management API.
  title: Gin CRUD API
  version: "1.0"
paths:
  /todos:
    get:
      description: Retrieves a list of all todo items.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Todo'
            type: array
      summary: Get all todo items
      tags:
      - Todos
    post:
      consumes:
      - application/json
      description: Creates a new todo item and links it to a user via user_id.
      parameters:
      - description: Todo item data (requires user_id)
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.Todo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Invalid input format or invalid User ID
          schema:
            additionalProperties: true
            type: object
      summary: Create a new todo item
      tags:
      - Todos
  /todos/{id}:
    delete:
      description: Soft-deletes a todo item by ID.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deletion successful
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Todo not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a todo item
      tags:
      - Todos
    get:
      description: Retrieves a single todo item by its ID.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "404":
          description: Todo not found
          schema:
            additionalProperties: true
            type: object
      summary: Get todo item by ID
      tags:
      - Todos
    patch:
      consumes:
      - application/json
      description: Updates the item and/or completed status for a specific todo.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Todo data (item and/or completed status)
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/models.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Todo'
        "400":
          description: Invalid input format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Todo not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a todo item
      tags:
      - Todos
  /users:
    get:
      description: Retrieves a list of all users, preloading their associated todos.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user with a unique username and email.
      parameters:
      - description: User data (only username and email are required)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input format or duplicate entry
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Soft-deletes a user by ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deletion successful" // <-- FIXED gin.H here
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found" // <-- FIXED gin.H here
          schema:
            additionalProperties: true
            type: object
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieves a single user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      summary: Get user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates the username and/or email for a specific user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data (only username/email are updated)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a user
      tags:
      - Users
swagger: "2.0"
